"Allows setting runtime defaults on arguments"
directive @default(
    "The runtime property to use for the default value"
    property : String!
) on ARGUMENT_DEFINITION

"Allows aliasing a result field by sourcing it to a different underlying field on the type being returned"
directive @fetch(
  from: String!
)
on FIELD_DEFINITION

"The unit of distance to use when considering a distance arg (for example, in location-related criteria)"
enum DistanceUnit {
  "Kilometers"
  KM

  "Miles"
  MI
}

"The languages currently supported"
enum Language {
  "German"
  DE

  "English"
  EN

  "Spanish"
  ES

  "French"
  FR

  "Italian"
  IT

  "Portuguese"
  PT

  "Portuguese (Brazil)"
  PT_BR

  "Russian"
  RU
}

"The populated-place types currently supported"
enum PopulatedPlaceType {
   "A level-2 administrative division (for example, a county)"
  ADM2

  "A city, town, or village"
  CITY
}

"What level of stale data is ok to pull"
enum IncludeDeletedFilterType {
  "All data, regardless of if/when marked deleted"
  ALL

  "Only data not marked deleted before yesterday"
  SINCE_YESTERDAY

  "Only data not marked deleted before last week"
  SINCE_LAST_WEEK

  "Only data not marked deleted"
  NONE
}

"How the results should be rendered"
input DisplayOptions {
  "Whether to display results using ASCII-only characters"
  asciiMode: Boolean = false

  "What language to display the results in"
  language: Language = EN
}

"Location GPS latitude/longitude coordinates"
input Location {
  "DD.DDDD from -90 to 90"
  latitude: Float

  "DD.DDDD from -180 to 180"
  longitude: Float
}

"The set of possible top-level queries"
type Query {
  "Look up a country"
  country(
    "An ISO-3166 country code or WikiData id"
    id: ID!

    "How to display the results"
    displayOptions: DisplayOptions
  ): Country

  "Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries."
  countries(
    "Only countries supporting this currency"
    currencyCode: String

    "Only countries whose names start with this prefix. If language is set, the prefix will be matched on the name as it appears in that language."
    namePrefix: String

    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String

    "How to display the results"
    displayOptions: DisplayOptions
  ): CountriesConnection

  "Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies."
  currencies(
    "Currencies for this country id"
    countryId: ID

    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String
  ): CurrenciesConnection

  "Get the distance between any two places"
  distanceBetween(
    "From some place"
    fromPlaceId: ID!

    "To some place"
    toPlaceId: ID!

    "The unit of distance to use"
    distanceUnit: DistanceUnit = MI
  ): Float

  "Get all known locales"
  locales(
    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String
  ): LocalesConnection

  "Look up a populated place"
  populatedPlace(
    # A place id (either native id or Wikidata ID)
    id: ID!

    "How to display the results"
    displayOptions: DisplayOptions
  ): PopulatedPlace

  "Find populated places, filtering by optional criteria. If no criteria are set, you will get back all known places."
  populatedPlaces (
    "Only places near this location"
    location: Location

    "The location radius within which to find places"
    radius: Float = 100

    "The unit of distance to use"
    distanceUnit: DistanceUnit = MI

    "Only places in these countries"
    countryIds: [ID]

    "Only places NOT in these countries"
    excludedCountryIds: [ID]

    "Only places whose names start with this prefix. If language is set, the prefix will be matched on the name as it appears in that language."
    namePrefix: String

    "Only places having at least this population"
    minPopulation: Int @default(property:"defaults.minPopulation")

    "Only places having no more than this population"
    maxPopulation: Int

    "Only places in these time-zones"
    timeZoneIds: [ID]

    "Only places for these types"
    types: [String]

    """
    How to sort place results
    Format: ±SORT_FIELD,±SORT_FIELD
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String

    "How to display the results"
    displayOptions: DisplayOptions

    "Whether to include any places marked deleted"
    includeDeleted: IncludeDeletedFilterType = NONE
  ): PopulatedPlacesConnection

  "Look up a time-zone"
  timeZone(id: ID!): TimeZone

  "Get all known time-zones"
  timeZones(
    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String
  ): TimeZonesConnection
}

"Info about the current connection page slice"
type ConnectionPageInfo {
  "The opaque id of the cursor representing the index of the first element in this page"
  startCursor: String

  "The opaque id of the cursor representing the index of the last element in this page"
  endCursor: String

  "Whether there are more pages in the results"
  hasNextPage: Boolean

  "Whether there are previous pages in the results"
  hasPreviousPage: Boolean
}

"A country"
type Country {
  "The ISO-3166 country code"
  code: ID

  "The country WikiData id"
  wikiDataId: ID

  "The country's capital city"
  capital: String

  "The country name"
  name: String

  "A list of supported ISO-4217 currency codes"
  currencyCodes: [String]

  "The country flag image"
  flagImageUri: String

  "The number of regions in this country"
  numRegions: Int

  "Look up a region in this country"
  region(
    "An ISO-3166 or FIPS region code"
    code: ID
  ): CountryRegion

  "Find regions in this country"
  regions(
    "Only regions whose names start with this prefix. If language is set, the prefix will be matched on the name as it appears in that language."
    namePrefix: String

    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String
  ): CountryRegionsConnection
}

"When paging countries, wraps a country node together with the cursor referencing its position in the results"
type CountryEdge {
  "The cursor id referencing the position of this node in the results"
  cursor: String

  "The node value"
  node: Country
}

"A pageable view into country results"
type CountriesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [CountryEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A region in a country. This could be a state, province, district, or otherwise major political division."
type CountryRegion {
  "The region FIPS 10-4 code"
  fipsCode: ID

  "The region ISO-3166 code"
  isoCode: ID

  "The region WikiData id"
  wikiDataId: ID

  "The region name"
  name: String

  "The region's capital city"
  capital: String

  "The region's country"
  country: Country

  "The number of populated places in this region"
  numPopulatedPlaces: Int @fetch(from:"numCities")

  "Find populated places in this region"
  populatedPlaces (
    "Only places whose names start with this prefix. If language is set, the prefix will be matched on the name as it appears in that language."
    namePrefix: String

    "Only places having at least this population"
    minPopulation: Int @default(property:"defaults.minPopulation")

    "Only places having no more than this population"
    maxPopulation: Int

    "Only places in these time-zones"
    timeZoneIds: [ID]

    "Only places for these types"
    types: [String]

    """
    How to sort place results
    Format: ±SORT_FIELD,±SORT_FIELD
    where SORT_FIELD = elevation | name | population
    """
    sort: String

    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String

    "Whether to include any places marked deleted"
    includeDeleted: IncludeDeletedFilterType = NONE
  ): RegionPopulatedPlacesConnection
}

"When paging regions, wraps a region node together with the cursor referencing its position in the results"
type CountryRegionEdge {
  "The cursor id referencing the position of this node in the results"
  cursor: String

  "The node value"
  node: CountryRegion
}

"A pageable view into region results"
type CountryRegionsConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [CountryRegionEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A country currency"
type Currency {
  countryCodes: [ID]
  code: ID
  symbol: String
}

"When paging currencies, wraps a currency node together with the cursor referencing its position in the results"
type CurrencyEdge {
  "The cursor id referencing the position of this node in the results"
  cursor: String

  "The node value"
  node: Currency
}

"A pageable view into currency results"
type CurrenciesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [CurrencyEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A regional locale representing some country/language combination"
type Locale {
  code: ID
  name: String
}

"When paging locales, wraps a locale node together with the cursor referencing its position in the results"
type LocaleEdge {
  "The cursor id referencing the position of this node in the results"
  cursor: String

  "The node value"
  node: Locale
}

"A pageable view into locale results"
type LocalesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [LocaleEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A pageable view into nearby populated-place results"
type NearbyPopulatedPlacesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [PopulatedPlaceEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A place with some population of inhabitants"
type PopulatedPlace {
  "The place native id"
  id: ID

  "The place WikiData id"
  wikiDataId: ID

  "The place name"
  name: String

  "The place type"
  placeType: PopulatedPlaceType @fetch(from:"type")

  "The place elevation (meters) above sea level"
  elevationMeters: Int

  "The place latittude (-90.0 to 90.0)"
  latitude: Float

  "The place longitude (-180.0 to 180.0)"
  longitude: Float

  "The place population"
  population: Int

  "The place timezone id"
  timezone: String

  "The place's country"
  country: Country

  "The place's region"
  region: CountryRegion

  """
  The distance result from some location-based query
  This field has two forms:
  - As a property (e.g., place.distance), returns the distance as part of a query returning places sorted by distance.
  - As a function (e.g., place.distance(toPlaceId), returns the distance to the specified place.
  """
  distance(
    "The distance to this place"
    toPlaceId: ID

    "The unit of distance to use"
    distanceUnit: DistanceUnit = MI
  ): Float

  "Find nearby populated places"
  nearbyPopulatedPlaces(
    "The location radius within which to find places"
    radius: Float = 100

    "The unit of distance to use"
    distanceUnit: DistanceUnit = MI

    "Only places in these countries"
    countryIds: [ID]

    "Only places NOT in these countries"
    excludedCountryIds: [ID]

    "Only places whose names start with this prefix. If language is set, the prefix will be matched on the name as it appears in that language."
    namePrefix: String

    "Only places having at least this population"
    minPopulation: Int @default(property:"defaults.minPopulation")

    "Only places having no more than this population"
    maxPopulation: Int

    "Only places in these time-zones"
    timeZoneIds: [ID]

    "Only places for these types"
    types: [String]

    """
    How to sort place results
    Format: ±SORT_FIELD,±SORT_FIELD
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    "How many results to retrieve from the beginning (or after the 'after' cursor, if specified)"
    first: Int

    "The cursor id after which to get results"
    after: String

    "How many results to retrieve from the end (or before the 'before' cursor, if specified)"
    last: Int

    "The cursor id before which to get results"
    before: String

    "Whether to include any places marked deleted"
    includeDeleted: IncludeDeletedFilterType = NONE
  ): NearbyPopulatedPlacesConnection

  "If this place has been marked deleted"
  deleted: Boolean
}

"When paging populated places, wraps a place node together with the cursor referencing its position in the results"
type PopulatedPlaceEdge {
  "The cursor id referencing the position of this node in the results"
  cursor: String

  "The node value"
  node: PopulatedPlace
}

"A pageable view into populated-place results"
type PopulatedPlacesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [PopulatedPlaceEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A pageable view into regional populated-place results"
type RegionPopulatedPlacesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [PopulatedPlaceEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}

"A time-zone"
type TimeZone {
  id: ID

  name: String
  rawUtcOffsetHours: Int

  dateTime: String
  time: String
}

"When paging time-zones, wraps a time-zone node together with the cursor referencing its position in the results"
type TimeZoneEdge {
  "The cursor id referencing the position of this node in the results"
  cursor: String

  "The node value"
  node: TimeZone
}

"A pageable view into time-zone results"
type TimeZonesConnection {
  "The total number of results"
  totalCount: Int

  "The edges in the current page of results"
  edges: [TimeZoneEdge]

  "Info about the current page of results"
  pageInfo: ConnectionPageInfo
}